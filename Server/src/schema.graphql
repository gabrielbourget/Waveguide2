# - Eventually have a permission for Friendship between users. 

enum Permission {
	ADMIN
	USER

}

type User {
	id: ID!
	name: String
	firstName: String 
	lastName: String 
	email: String!
	password: String!
	image: String
	biography: String
	createdAt: DateTime
	updatedAt: DateTime 	
	permissions: [Permission!]!
	artProjects: [ArtProject] @relation(name: "ALIAS_OF", direction: "IN")
	musicLabels: [MusicLabel] @relation(name: "OWNER_OF", direction: "OUT")
	artCollectives: [ArtCollective] @relation(name: "MEMBER_OF", direction: "OUT")
	socialMediaGroups: [SocialMediaGroup] @relation(name: "MEMBER_OF", direction: "OUT")
	socialMediaLinks: [SocialMediaLink] @relation(name: "HAS_LINK_TO", direction: "OUT")
}

type ArtProject {
	id: ID!
	image: String
	name: String
	biography: String
	socialMediaLinks: [SocialMediaLink] @relation(name: "HAS_LINK_TO", direction: "OUT")
	songs: [Song] @relation(name: "CREATOR_OF", direction: "OUT")
	creator: User @relation(name: "ALIAS_OF", direction: "OUT")
}

type Song {
	id: ID!
	title: String
	image: String
	duration: Int
	keySignature: String
	tempo: Int
	releaseDate: DateTime
}

type SocialMediaLink {
	id: ID!
	network: String
	link: String!
}

type MusicLabel {
	id: ID!
	name: String
	image: String
	biograph: String
	owners: [User] @relation(name: "OWNER_OF", direction: "IN")
	socialMediaLinks: [SocialMediaLink] @relation(name: "HAS_LINK_TO", direction: "OUT")
}

type ArtCollective {
	id: ID!
	name: String
	image: String 
	biography: String
	members: [User] @relation(name: "MEMBER_OF", direction: "IN")
	socialMediaLinks: [SocialMediaLink] @relation(name: "HAS_LINK_TO", direction: "OUT")
}

type SocialMediaGroup {
	id: ID!
	name: String 
	image: String
	biography: String
	socialNetwork: String
	members: [User] @relation(name: "MEMBER_OF", direction: "IN")
}











